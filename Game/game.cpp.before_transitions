#include "game.h"
#include "wrapper.h"
#include "sky.h"

#define GROUND
#define RUMBLES
//#define CURVED
#define SEGMENTS
//#define ROADSIDE
//#define TRAFFIC

int zlookup[YTABS],x1lookup[YTABS],x2lookup[YTABS],xlookup[YTABS],dxlookup[YTABS];
byte curvature[YTABS];
int xspots[NUMSPOTS];
int zspots[NUMSPOTS];
int xonscreen[NUMSPOTS];
int yonscreen[NUMSPOTS];
int xcars[NUMCARS];
int zcars[NUMCARS];
int drawn=0;

unsigned long z_world=0;
int z_car=0,zspeed = 0, wheeltick=0, carx=TVXCENTER-16,cary=CARY,acceltick=ACCELTIME,
    deceltick=1,fumeframe=0,roadx=0,skytick=0,skyx=0,segment=0,osegment=0;

byte lanes=3,car_dir=UP,lastRoad,segreset;
signed char wheeloffset=0;


//=========================================================================
// Draw sky
//=========================================================================

void drawSky(int x,int y){
     TV.bitmap(x, y, sky);
}

//=========================================================================
// BUILD ROAD GEOMETRY
//=========================================================================

void gameSetup() {
    int k=0;
    lastRoad=track1[0];
    // table of spots
    for (int i=0; i < NUMSPOTS; i+=2) {
        xspots[i] = 22;   // distributed PALMS !!
        xspots[i+1] = -22;//*-8;   // distributed PALMS !!
        zspots[i] = (z_car)+i*(1000/NUMSPOTS);
        zspots[i+1] = (z_car)+i*(1000/NUMSPOTS);
    }
    k=0;

    // table for cars
    for (int i=0; i < NUMCARS; i++) {
        xcars[i] = ROADW;   // distributed cars
        zcars[i] = (i+1)*(1000);
    }
    zcars[0] = 400;
    zcars[1] = 800;
    zcars[2] = 1000;
    zcars[3] = 1300;
    xcars[0] = 25;
    xcars[1] = -35;
    xcars[2] = -5;
    xcars[3] = -35;

    // lookup table for z and road sides and curvature
    float c = 0.1;
    for (int y=TVY-1; y>HORIZON ;y--) {
        int zy=HORIZON;
        if (y - HORIZON > 0) {zy = Y_CAMERA / (y-HORIZON);
        } else { break;}
        zlookup[k] = zy;
        x1lookup[k] = TVXCENTER - ((ROADW/zy)*Z_MULT);
        x2lookup[k] = TVXCENTER + ((ROADW/zy)*Z_MULT);
        xlookup[k] = (ROADW/zy)*Z_MULT;
        if (TVX > 120) c = c + c * 0.145; else c = c + c * 0.165;
        curvature[k] = c;
        // sideways DX table, is DIVIDED BY DXDIV when calculating !
        dxlookup[k] = (TVXCENTER - x1lookup[k]);
        k++;
    }
}

//=========================================================================
// checkSegment - check for changes in road structure
//=========================================================================

void checkSegment() {

}

//=========================================================================
// DRAW ROAD
//=========================================================================

void drawRoad() {
    byte roadType;
    unsigned int ztemp, zt2;
    int yTransition = HORIZON, yT2;

    // determine segment transition point
    ztemp = (z_world >> SEGSLOWDOWN) & (SEGLENGTH-1);
    ztemp = SEGLENGTH - ztemp;
    zt2 = ztemp+200;
    if (ztemp > 600 && ztemp < 800) segreset = true;
    if (ztemp < 512 && segreset) {
        yTransition = HORIZON + (Y_CAMERA / (ztemp+1));
        yT2 = HORIZON + (Y_CAMERA / (zt2+1));
        if (yTransition >= TVY-5) {
            segment++;
            segreset = false;
        }
    }

    // draw ground
    #ifdef GROUND
    for (int screeny=TVY-1; screeny > HORIZON; screeny--) {
        int a,b;
        int q = TVY-screeny; // define index for lookup

        if (screeny < yTransition && segreset) {
            roadType = track1[segment+1];
        } else roadType =track1[segment];
        // find road sides depending on road width
        if (roadType & WIDEROAD) {
             a = TVXCENTER - xlookup[q]*2 + roadx*dxlookup[q]/DXDIV;
             b = TVXCENTER + xlookup[q]*2 + roadx*dxlookup[q]/DXDIV;
        } else {
             a = x1lookup[q] + roadx*dxlookup[q]/DXDIV;
             b = x2lookup[q] + roadx*dxlookup[q]/DXDIV;
        }

        // Clean the road
        if (a>=0 && b <=TVX) {
                if (screeny > cary + 14 && screeny < cary + 19 ) {
                    TV.draw_line (a,screeny,carx-14,screeny,0);
                    TV.draw_line (carx+60,screeny,b,screeny,0);
                } else {
                TV.draw_line (a,screeny,b,screeny,0);
                }
        } else {
                TV.draw_line (0,screeny,TVX,screeny,0);
        }

        // check if a or b are out of bounds and draw road sides
        if (a>=0) TV.draw_line (0,screeny,a,screeny,1);
        if (b<=TVX) TV.draw_line (b,screeny,TVX,screeny,1);
    }
    #endif

    #ifdef SEGMENTS
        if (yTransition > HORIZON) {
        TV.draw_line(0,yTransition,TVX,yTransition,1);
        TV.draw_line(0,yT2,TVX,yT2,1);}
    #endif // SEGMENTS

    #ifdef ROADSIDE
    //draw spots
    for (int i=0; i < NUMSPOTS; i++) {
        int y,x,z,coffset;
        x = xspots[i];
        z = zspots[i];

        if (z < z_world+20) {
            zspots[i] = z_world+ 1000; // push spot to horizon
            x = xspots[i];
            z = zspots[i];
        }

        y = (Y_CAMERA / (z-z_world)) + HORIZON;
        #ifdef CURVED
            coffset = curvature[TVY-y];
        #else
            coffset=0;
        #endif
            if (z-z_world > 650) {
                    //alphabitmap(x-3,y-7,palm_tiny,palm_tiny_alpha);
                } else {
                if (z-z_world > 500) {
                    //x = TVXCENTER+(roadx*dxlookup[TVY-y-2]/DXDIV)+3*x*dxlookup[TVY-y-2]/DXDIV+coffset;
                    //if(x>3 && x < TVX-10) alphabitmap(x-3,y-7,palm_tiny,palm_tiny_alpha);
                } else {
                    if (z-z_world > 250) {
                         x = TVXCENTER+(roadx*dxlookup[TVY-y-1]/DXDIV)+3*x*dxlookup[TVY-y-1]/DXDIV+coffset;
                        if(x>3 && x < TVX-10) alphabitmap(x-3,y-8,palm_tiny,palm_tiny_alpha);
                        } else {
                            if (z-z_world > 205) {
                                x = TVXCENTER+(roadx*dxlookup[TVY-y-3]/DXDIV)+3*x*dxlookup[TVY-y-3]/DXDIV+coffset;
                                if(x>3 && x < TVX-10) alphabitmap(x-3,y-10,palm_small,palm_small_alpha);
                            } else {
                                if (z-z_world > 150) {
                                        x = TVXCENTER+(roadx*dxlookup[TVY-y-2]/DXDIV)+3*x*dxlookup[TVY-y-2]/DXDIV+coffset;
                                        if(x>4 && x < TVX-10) alphabitmap(x-4,y-15,palm,palm_alpha);
                                        } else {
                                        if (z-z_world > 30) {
                                                x = TVXCENTER+(roadx*dxlookup[TVY-y-6]/DXDIV)+3*x*dxlookup[TVY-y-6]/DXDIV+coffset;
                                                if(x>10 && x < TVX-10) alphabitmap(x-6,y-22,palm_big,palm_big_alpha);
                                                }
                                        }}}}}
}
    #endif // ROADSIDE

    // draw rumbles
    #ifdef RUMBLES
    for (int screeny=TVY-1; screeny > HORIZON; screeny--) {
        int a,b,c,d,dx,zy,rumblew,roffset;
        int q = TVY-screeny;
        zy = zlookup[q];
        if (zy<1) break; // invalid line
        zy += z_car;
        byte col = colorlookup[zy&63]; // z_car modulus 64 x%64 == x&63 to have only a 64 byte rumble buffer
        dx = dxlookup[q]; // find dx width for this Z depth
        rumblew = dx/RUMBLEW;
        roffset = dx/RUMBLEOFFS;
        a = x1lookup[q]+(roadx*dx/DXDIV)+ roffset; // rumble left edge
        b = a+rumblew; // rumble right edge
        if (a<0) a=0; // rumble left edge out of screen check
        if (b>0) TV.draw_line (a,screeny,b,screeny,col); // if rumble is visible, draw
        c = x2lookup[q]+(roadx*dx/DXDIV) - roffset; // right ride of road
        d = c-rumblew; // rumble left edge
        if (c>TVX) c=TVX; // check if roadside is out of screen
        if (d<TVX) TV.draw_line (c,screeny,d,screeny,col); // if visible, draw
    }
    #endif


    #ifdef TRAFFIC
            // draw cars

   for (int i=NUMCARS; i >-1; i--) {
        int y,x,z,coffset;
        x = xcars[i];
        zcars[i] += OTHERCARSSPEED;
        z = zcars[i];

        if (z < z_world-30) {
            zcars[i] = z_world+ 1000*NUMCARS; // push spot to horizon
            x = xcars[i];
            z = zcars[i];
        }
        if(z-z_world==0) z++;
        y = (Y_CAMERA / (z-z_world)) + HORIZON;
        #ifdef CURVED
            coffset = curvature[TVY-y-5];
        #else
            coffset=0;
        #endif
            if (z-z_world > 2000) {
            } else {
            if (z-z_world > 1500) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-3];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-3]/DXDIV)+x*dxlookup[TVY-y-3]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)TV.draw_rect(x,y+2,2,1,0,0);
            } else {
            if (z-z_world > 1100) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-3];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-3]/DXDIV)+x*dxlookup[TVY-y-3]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)TV.draw_rect(x,y+1,3,2,0,1);
            } else {
            if (z-z_world > 500) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-5];
                    #else
                    coffset=0;
                    #endif
                     x = TVXCENTER+(roadx*dxlookup[TVY-y-5]/DXDIV)+x*dxlookup[TVY-y-5]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)alphabitmap(x-1,y,porsche_tiny,porsche_tiny_alpha);
            } else {
            if (z-z_world > 200) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-8];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-8]/DXDIV)+x*dxlookup[TVY-y-8]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)alphabitmap(x,y,porsche_small,porsche_small_alpha);
            } else {
            if (z-z_world > 30) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-9];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-9]/DXDIV)+x*dxlookup[TVY-y-9]/DXDIV+coffset;
                    if(x>0 && y < TVY-21 && x< TVX-10) alphabitmap(x,y,porsche_med,porsche_med_alpha);
            }}}}}}}
    #endif // TRAFFIC
}
//=========================================================================
// DRAW 3 LANES
//=========================================================================

void threeLanes() {
    // draw ground

    #ifdef GROUND
    for (int screeny=TVY; screeny > HORIZON; screeny--) {
        int a,b;
        int q = TVY-screeny; // define index for lookup
        // find road sides
        #ifdef CURVED
        a = TVXCENTER - xlookup[q]*2 + roadx*dxlookup[q]/DXDIV+curvature[q];
        b = TVXCENTER + xlookup[q]*2 + roadx*dxlookup[q]/DXDIV+curvature[q];
        #else
        a = TVXCENTER - xlookup[q]*2 + roadx*dxlookup[q]/DXDIV;
        b = TVXCENTER + xlookup[q]*2 + roadx*dxlookup[q]/DXDIV;
        #endif
        // Clean the road
        if (a>=0 && b <=TVX) {
                if (screeny > cary + 14 && screeny < cary + 19 ) {
                    TV.draw_line (a,screeny,carx-14,screeny,0);
                    TV.draw_line (carx+60,screeny,b,screeny,0);
                } else {
                TV.draw_line (a,screeny,b,screeny,0);
                }
        } else {
                TV.draw_line (0,screeny,TVX,screeny,0);
        }

        // check if a or b are out of bounds and draw road sides

        if (a>=0) TV.draw_line (0,screeny,a,screeny,1);
        if (b<=TVX) TV.draw_line (b,screeny,TVX,screeny,1);
    }
    #endif

   //draw spots


    for (int i=0; i < NUMSPOTS; i++) {
        int y,x,z,coffset;
        x = xspots[i];
        z = zspots[i];

        if (z < z_world+20) {
            zspots[i] = z_world+ 1000; // push spot to horizon
            x = xspots[i];
            z = zspots[i];
        }

        y = (Y_CAMERA / (z-z_world)) + HORIZON;
        #ifdef CURVED
            coffset = curvature[TVY-y];
        #else
            coffset=0;
        #endif
            if (z-z_world > 650) {
                    //alphabitmap(x-3,y-7,palm_tiny,palm_tiny_alpha);
                } else {
                if (z-z_world > 500) {
                    //x = TVXCENTER+(roadx*dxlookup[TVY-y-2]/DXDIV)+3*x*dxlookup[TVY-y-2]/DXDIV+coffset;
                    //if(x>3 && x < TVX-10) alphabitmap(x-3,y-7,palm_tiny,palm_tiny_alpha);
                } else {
                    if (z-z_world > 250) {
                         x = TVXCENTER+(roadx*dxlookup[TVY-y-1]/DXDIV)+3*x*dxlookup[TVY-y-1]/DXDIV+coffset;
                        if(x>3 && x < TVX-10) alphabitmap(x-3,y-8,palm_tiny,palm_tiny_alpha);
                        } else {
                            if (z-z_world > 205) {
                                x = TVXCENTER+(roadx*dxlookup[TVY-y-3]/DXDIV)+3*x*dxlookup[TVY-y-3]/DXDIV+coffset;
                                if(x>3 && x < TVX-10) alphabitmap(x-3,y-10,palm_small,palm_small_alpha);
                            } else {
                                if (z-z_world > 150) {
                                        x = TVXCENTER+(roadx*dxlookup[TVY-y-2]/DXDIV)+3*x*dxlookup[TVY-y-2]/DXDIV+coffset;
                                        if(x>4 && x < TVX-10) alphabitmap(x-4,y-15,palm,palm_alpha);
                                        } else {
                                        if (z-z_world > 30) {
                                                x = TVXCENTER+(roadx*dxlookup[TVY-y-6]/DXDIV)+3*x*dxlookup[TVY-y-6]/DXDIV+coffset;
                                                if(x>10 && x < TVX-10) alphabitmap(x-6,y-22,palm_big,palm_big_alpha);
                                                }
                                        }}}}}
}


    // draw rumbles
    #ifdef RUMBLES

    for (int screeny=TVY-1; screeny > HORIZON; screeny--) {
        int a,b,c,d,dx,zy,rumblew,roffset,coffset;
        int q = TVY-screeny;
        zy = zlookup[q];
        if (zy<1) break; // invalid line
        byte col = colorlookup[zy+z_car];
        dx = dxlookup[q]; // find dx width for this Z depth
        rumblew = dx/RUMBLEW;
        //roffset = dx/RUMBLEOFFS;
        roffset = 4*dx/RUMBLEOFFS;
        #ifdef CURVED
            coffset = curvature[q];
        #else
            coffset=0;
        #endif
        a = x1lookup[q]+(roadx*dx/DXDIV)+ roffset + coffset; // rumble left edge
        b = a+rumblew; // rumble right edge
        if (a<0) a=0; // rumble left edge out of screen check
        if (b>0) TV.draw_line (a,screeny,b,screeny,col); // if rumble is visible, draw
        c = x2lookup[q]+(roadx*dx/DXDIV) - roffset + coffset; // right ride of road
        d = c-rumblew; // rumble left edge
        if (c>TVX) c=TVX; // check if roadside is out of screen
        if (d<TVX) TV.draw_line (c,screeny,d,screeny,col); // if visible, draw
    }
    #endif

        // draw cars

   for (int i=NUMCARS; i >-1; i--) {
        int y,x,z,coffset;
        x = xcars[i];
        zcars[i] += OTHERCARSSPEED;
        z = zcars[i];

        if (z < z_world-30) {
            zcars[i] = z_world+ 1000*NUMCARS; // push spot to horizon
            x = xcars[i];
            z = zcars[i];
        }
        if(z-z_world==0) z++;
        y = (Y_CAMERA / (z-z_world)) + HORIZON;
        #ifdef CURVED
            coffset = curvature[TVY-y-5];
        #else
            coffset=0;
        #endif
            if (z-z_world > 2000) {
            } else {
            if (z-z_world > 1500) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-3];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-3]/DXDIV)+x*dxlookup[TVY-y-3]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)TV.draw_rect(x,y+2,2,1,0,0);
            } else {
            if (z-z_world > 1100) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-3];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-3]/DXDIV)+x*dxlookup[TVY-y-3]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)TV.draw_rect(x,y+1,3,2,0,1);
            } else {
            if (z-z_world > 500) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-5];
                    #else
                    coffset=0;
                    #endif
                     x = TVXCENTER+(roadx*dxlookup[TVY-y-5]/DXDIV)+x*dxlookup[TVY-y-5]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)alphabitmap(x-1,y,porsche_tiny,porsche_tiny_alpha);
            } else {
            if (z-z_world > 200) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-8];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-8]/DXDIV)+x*dxlookup[TVY-y-8]/DXDIV+coffset;
                    if(x>0 && x < TVX-10)alphabitmap(x,y,porsche_small,porsche_small_alpha);
            } else {
            if (z-z_world > 30) {
                    #ifdef CURVED
                    coffset = curvature[TVY-y-9];
                    #else
                    coffset=0;
                    #endif
                    x = TVXCENTER+(roadx*dxlookup[TVY-y-9]/DXDIV)+x*dxlookup[TVY-y-9]/DXDIV+coffset;
                    if(x>0 && y < TVY-21 && x< TVX-10) alphabitmap(x,y,porsche_med,porsche_med_alpha);
            }}}}}}
        //}
   }
}
